<!-- views/index.ejs -->
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Real-time Text Share</title>
    <link rel="stylesheet" href="/style.css" />
    <script src="/qrcode.min.js"></script>
    <link
      id="favicon"
      rel="icon"
      type="image/svg+xml"
      href="data:image/svg+xml,%3Csvg%20id%3D%22svg%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%22128%22%20height%3D%22128%22%20viewBox%3D%220%200%20128%20128%22%20align%3D%22center%22%3E%3Ctext%20x%3D%2264%22%20y%3D%2274%22%20dominant-baseline%3D%22middle%22%20text-anchor%3D%22middle%22%20font-size%3D%22100%22%20font-family%3D%22sans-serif%22%20fill%3D%22%23000000%22%20font-weight%3D%22normal%22%3E%F0%9F%8F%B9%3C%2Ftext%3E%3C%2Fsvg%3E"
    />
  </head>
  <body>
    <div class="container">
      <div id="header">
        <h1>Real-time Text Share</h1>
        <div>
          <div><a href="/" class="button">New Room</a></div>
          <div id="qrcode"></div>
        </div>
      </div>
      <textarea
        id="sharedText"
        placeholder="Start typing to share..."
      ></textarea>
      <div class="users-info">
        <p>Connected Users: <span id="userCount">0</span></p>
        <ul id="userList"></ul>
        <p class="privacy-note">
          Your IP address will be visible to other users in this room.
        </p>
      </div>
      <footer class="footer">
        <p>
          <a href="https://github.com/andygock/text-share" target="_blank"
            >GitHub</a
          >.
        </p>
      </footer>
    </div>

    <script>
      const roomId = "<%= roomId %>";
      const protocol = window.location.protocol === "https:" ? "wss" : "ws";
      const websocket = new WebSocket(
        `${protocol}://${window.location.host}/${roomId}`
      );
      const sharedTextarea = document.getElementById("sharedText");
      const qrcodeDiv = document.getElementById("qrcode");
      const userCountSpan = document.getElementById("userCount");
      const userListUl = document.getElementById("userList");

      // Generate QR Code
      const currentUrl = window.location.href;
      new QRCode(qrcodeDiv, {
        text: currentUrl,
        width: 128,
        height: 128,
        colorDark: "#000",
        colorLight: "#fff",
        correctLevel: QRCode.CorrectLevel.H,
      });

      // send message to server when user types in textarea
      sharedTextarea.addEventListener("input", () => {
        websocket.send(sharedTextarea.value);
      });

      // receive message from server
      websocket.onmessage = (event) => {
        const message = JSON.parse(event.data);
        if (message.type === "textUpdate") {
          sharedTextarea.value = message.text;
        } else if (message.type === "userList") {
          updateUserList(message.users);
        } else if (message.type === "userConnected") {
          addUser(message.ip);
        } else if (message.type === "userDisconnected") {
          removeUser(message.ip);
        }
      };

      function updateUserList(users) {
        userListUl.innerHTML = ""; // Clear existing list
        users.forEach((ip) => addUserToList(ip));
        userCountSpan.textContent = users.length;
      }

      function addUser(ip) {
        addUserToList(ip);
        userCountSpan.textContent = parseInt(userCountSpan.textContent) + 1;
      }

      function removeUser(ip) {
        removeUserFromList(ip);
        userCountSpan.textContent = parseInt(userCountSpan.textContent) - 1;
      }

      function addUserToList(ip) {
        const li = document.createElement("li");
        li.textContent = ip;
        li.dataset.ip = ip; // Store IP for easy removal
        userListUl.appendChild(li);
      }

      function removeUserFromList(ip) {
        const userLi = userListUl.querySelector(`li[data-ip="${ip}"]`);
        if (userLi) {
          userListUl.removeChild(userLi);
        }
      }

      websocket.onopen = () => {
        console.log("WebSocket connection opened");
      };

      websocket.onclose = () => {
        console.log("WebSocket connection closed");
      };

      websocket.onerror = (error) => {
        console.error("WebSocket error:", error);
      };
    </script>
  </body>
</html>
