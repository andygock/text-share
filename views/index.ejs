<!-- views/index.ejs -->
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Real-time Text Share</title>
    <link rel="stylesheet" href="/style.css" />
    <script src="/qrcode.min.js"></script>
    <link
      id="favicon"
      rel="icon"
      type="image/svg+xml"
      href="data:image/svg+xml,%3Csvg%20id%3D%22svg%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%22128%22%20height%3D%22128%22%20viewBox%3D%220%200%20128%20128%22%20align%3D%22center%22%3E%3Ctext%20x%3D%2264%22%20y%3D%2274%22%20dominant-baseline%3D%22middle%22%20text-anchor%3D%22middle%22%20font-size%3D%22100%22%20font-family%3D%22sans-serif%22%20fill%3D%22%23000000%22%20font-weight%3D%22normal%22%3E%F0%9F%8F%B9%3C%2Ftext%3E%3C%2Fsvg%3E"
    />
  </head>
  <body>
    <div class="container">
      <div id="header">
        <h1>Real-time Text & Image Share</h1>
        <div>
          <div><a href="/" class="button">New Room</a></div>
          <div id="qrcode"></div>
        </div>
      </div>
      <textarea
        id="sharedText"
        placeholder="Start typing to share..."
      ></textarea>
      <div class="textarea-barcode-controls">
        <button class="button" id="generate-barcodes">
          Generate QRCodes for Text
        </button>
        <button id="close-barcodes" title="Hide QR Codes" style="display: none">
          âœ•
        </button>
      </div>
      <div class="barcodes"></div>
      <div id="image-share">
        <h2>Images</h2>
        <form id="imageUploadForm" enctype="multipart/form-data">
          <input
            type="file"
            id="imageInput"
            name="image"
            accept="image/png,image/jpeg,image/webp"
            style="display: none"
          />
          <div id="dropArea">
            Drag & Drop or
            <button type="button" id="selectImageBtn">Select Image</button>
          </div>
        </form>
        <div id="sharedImages"></div>
        <!-- Upload status indicator -->
        <div
          id="uploadStatus"
          style="display: none; margin: 0.5rem 0; text-align: center"
        ></div>
      </div>
      <div class="users-info">
        <p>Connected Users: <span id="userCount">0</span></p>
        <ul id="userList"></ul>
        <p class="privacy-note">
          Your IP address will be visible to other users in this room.
        </p>
      </div>
      <footer class="footer">
        <p>
          <a href="https://github.com/andygock/text-share" target="_blank"
            >GitHub</a
          >
        </p>
      </footer>
    </div>

    <script>
      (function () {
        //
        // qrcode generation
        //

        function generateTextAreaBarcodes() {
          // generate barcodes, one qrcode per line in the textarea, ignore white space only lines
          const lines = sharedTextarea.value.split("\n");
          const barcodesDiv = document.querySelector(".barcodes");
          barcodesDiv.innerHTML = ""; // Clear existing barcodes

          lines.forEach((line) => {
            const trimmedLine = line.trim();
            if (trimmedLine) {
              const barcodeDiv = document.createElement("div");
              barcodeDiv.className = "barcode-item";
              barcodesDiv.appendChild(barcodeDiv);
              new QRCode(barcodeDiv, {
                text: trimmedLine,
                width: 128,
                height: 128,
                colorDark: "#000",
                colorLight: "#fff",
                correctLevel: QRCode.CorrectLevel.H,
              });

              // add text under the barcode
              const textDiv = document.createElement("div");
              textDiv.className = "barcode-text";
              textDiv.textContent = trimmedLine;
              barcodeDiv.appendChild(textDiv);
            }
          });
        }

        const barcodesDiv = document.querySelector(".barcodes");
        const generateBarcodesButton =
          document.getElementById("generate-barcodes");
        const closeBarcodesButton = document.getElementById("close-barcodes");

        generateBarcodesButton.addEventListener("click", () => {
          generateTextAreaBarcodes();
          generateBarcodesButton.dataset.hash = inputHash;
          generateBarcodesButton.disabled = true;
          closeBarcodesButton.style.display = "inline-block";
          barcodesDiv.style.display = "block";
        });

        closeBarcodesButton.addEventListener("click", () => {
          barcodesDiv.innerHTML = "";
          barcodesDiv.style.display = "none";
          closeBarcodesButton.style.display = "none";
          generateBarcodesButton.disabled = false;
        });

        //
        // input text and room handling
        //

        const roomId = "<%= roomId %>";
        const protocol = window.location.protocol === "https:" ? "wss" : "ws";
        const websocket = new WebSocket(
          `${protocol}://${window.location.host}/${roomId}`
        );
        const sharedTextarea = document.getElementById("sharedText");
        const qrcodeDiv = document.getElementById("qrcode");
        const userCountSpan = document.getElementById("userCount");
        const userListUl = document.getElementById("userList");

        let inputHash = "";

        function crc32(str) {
          // CRC32 hash function
          let crc = 0xffffffff;
          for (let i = 0; i < str.length; i++) {
            crc ^= str.charCodeAt(i);
            for (let j = 0; j < 8; j++) {
              crc = (crc >>> 1) ^ (crc & 1 ? 0xedb88320 : 0);
            }
          }
          return (crc ^ 0xffffffff) >>> 0;
        }

        function updateHash(str) {
          // generate crc32 hash of the string
          const hash = crc32(str);
          inputHash = hash;
        }

        // Generate QR Code for url
        const currentUrl = window.location.href;
        new QRCode(qrcodeDiv, {
          text: currentUrl,
          width: 128,
          height: 128,
          colorDark: "#000",
          colorLight: "#fff",
          correctLevel: QRCode.CorrectLevel.H,
        });

        // send message to server when user types in textarea
        sharedTextarea.addEventListener("input", () => {
          websocket.send(sharedTextarea.value);
          updateHash(sharedTextarea.value);
          generateBarcodesButton.disabled = false;
        });

        // receive message from server
        websocket.onmessage = (event) => {
          const message = JSON.parse(event.data);
          if (message.type === "textUpdate") {
            sharedTextarea.value = message.text;
            updateHash(message.text);
            generateBarcodesButton.disabled = false;
          } else if (message.type === "userList") {
            updateUserList(message.users);
          } else if (message.type === "userConnected") {
            addUser(message.ip);
          } else if (message.type === "userDisconnected") {
            removeUser(message.ip);
          }
        };

        function updateUserList(users) {
          userListUl.innerHTML = ""; // Clear existing list
          users.forEach((ip) => addUserToList(ip));
          userCountSpan.textContent = users.length;
        }

        function addUser(ip) {
          addUserToList(ip);
          userCountSpan.textContent = parseInt(userCountSpan.textContent) + 1;
        }

        function removeUser(ip) {
          removeUserFromList(ip);
          userCountSpan.textContent = parseInt(userCountSpan.textContent) - 1;
        }

        function addUserToList(ip) {
          const li = document.createElement("li");
          li.textContent = ip;
          li.dataset.ip = ip; // Store IP for easy removal
          userListUl.appendChild(li);
        }

        function removeUserFromList(ip) {
          const userLi = userListUl.querySelector(`li[data-ip="${ip}"]`);
          if (userLi) {
            userListUl.removeChild(userLi);
          }
        }

        //
        // Image sharing logic
        //

        const imageInput = document.getElementById("imageInput");
        const selectImageBtn = document.getElementById("selectImageBtn");
        const dropArea = document.getElementById("dropArea");
        const imageUploadForm = document.getElementById("imageUploadForm");
        const sharedImages = document.getElementById("sharedImages");

        // Prevent default drag behaviors
        ["dragenter", "dragover", "dragleave", "drop"].forEach((eventName) => {
          dropArea.addEventListener(eventName, (e) => {
            e.preventDefault();
            e.stopPropagation();
          });
        });
        dropArea.addEventListener("dragover", () =>
          dropArea.classList.add("dragover")
        );
        dropArea.addEventListener("dragleave", () =>
          dropArea.classList.remove("dragover")
        );
        dropArea.addEventListener("drop", (e) => {
          dropArea.classList.remove("dragover");
          if (e.dataTransfer.files && e.dataTransfer.files[0]) {
            uploadImage(e.dataTransfer.files[0]);
          }
        });
        selectImageBtn.addEventListener("click", () => imageInput.click());
        imageInput.addEventListener("change", (e) => {
          if (e.target.files && e.target.files[0]) {
            uploadImage(e.target.files[0]);
          }
        });
        // Upload feedback indicator
        let uploadStatus = document.getElementById("uploadStatus");
        if (!uploadStatus) {
          uploadStatus = document.createElement("div");
          uploadStatus.id = "uploadStatus";
          uploadStatus.style.display = "none";
          uploadStatus.style.margin = "0.5rem 0";
          uploadStatus.style.textAlign = "center";
          document
            .getElementById("image-share")
            .insertBefore(uploadStatus, sharedImages);
        }
        let uploadProgressBar = document.getElementById("uploadProgressBar");
        if (!uploadProgressBar) {
          uploadProgressBar = document.createElement("progress");
          uploadProgressBar.id = "uploadProgressBar";
          uploadProgressBar.max = 100;
          uploadProgressBar.value = 0;
          uploadProgressBar.style.display = "none";
          uploadProgressBar.style.width = "60%";
          uploadStatus.appendChild(uploadProgressBar);
        }

        async function uploadImage(file) {
          const allowed = ["image/png", "image/jpeg", "image/webp"];
          if (!allowed.includes(file.type)) {
            alert("Only PNG, JPG, and WEBP images are allowed.");
            return;
          }
          const formData = new FormData();
          formData.append("image", file);
          uploadStatus.textContent = "Uploading...";
          uploadStatus.style.display = "block";
          uploadProgressBar.value = 0;
          uploadProgressBar.style.display = "inline-block";

          // Use XMLHttpRequest for real upload progress
          const xhr = new XMLHttpRequest();
          xhr.open("POST", `/${roomId}/upload`);

          xhr.upload.onprogress = function (e) {
            if (e.lengthComputable) {
              const percent = Math.round((e.loaded / e.total) * 100);
              uploadProgressBar.value = percent;
              uploadStatus.textContent = `Uploading... ${percent}%`;
            }
          };

          xhr.onload = function () {
            uploadProgressBar.style.display = "none";
            let data;
            try {
              data = JSON.parse(xhr.responseText);
            } catch {
              uploadStatus.textContent = "Upload failed.";
              setTimeout(() => (uploadStatus.style.display = "none"), 3000);
              return;
            }
            if (xhr.status < 200 || xhr.status >= 300) {
              if (data && data.error) {
                uploadStatus.textContent = "Error: " + data.error;
              } else {
                uploadStatus.textContent = "Upload failed.";
              }
              setTimeout(() => (uploadStatus.style.display = "none"), 3000);
              return;
            }
            uploadStatus.textContent = "Upload complete!";
            setTimeout(() => (uploadStatus.style.display = "none"), 1200);
            // Do not call addImageToUI here; wait for WebSocket broadcast
          };

          xhr.onerror = function () {
            uploadProgressBar.style.display = "none";
            uploadStatus.textContent = "Upload failed.";
            setTimeout(() => (uploadStatus.style.display = "none"), 3000);
          };

          xhr.send(formData);
        }
        function addImageToUI(url, filename, width, height, sizeKB) {
          const div = document.createElement("div");
          div.className = "shared-image";
          const img = document.createElement("img");
          img.src = url;
          img.alt = filename;
          img.loading = "lazy";
          img.style.maxWidth = "200px";
          img.style.maxHeight = "200px";
          const dl = document.createElement("a");
          dl.href = url;
          dl.download = filename;
          dl.textContent = "Download";
          const info = document.createElement("div");
          if (width && height && sizeKB) {
            info.textContent = `${width}x${height}px, ${sizeKB} kB`;
            info.className = "image-info";
          }
          div.appendChild(img);
          div.appendChild(document.createElement("br"));
          div.appendChild(dl);
          if (info.textContent) div.appendChild(document.createElement("br"));
          div.appendChild(info);
          sharedImages.appendChild(div);
        }
        // Listen for imageUpload events from WebSocket
        websocket.addEventListener("message", (event) => {
          try {
            const message = JSON.parse(event.data);
            if (message.type === "imageUpload") {
              addImageToUI(
                message.url,
                message.filename,
                message.width,
                message.height,
                message.sizeKB
              );
            }
          } catch {}
        });

        websocket.onopen = () => {
          console.log("WebSocket connection opened");
        };

        websocket.onclose = () => {
          console.log("WebSocket connection closed");
        };

        websocket.onerror = (error) => {
          console.error("WebSocket error:", error);
        };
      })();
    </script>
  </body>
</html>
